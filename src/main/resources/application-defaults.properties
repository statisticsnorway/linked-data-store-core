http.host=0.0.0.0
http.port=9090
http.prefix=/
http.request.dump=false
http.cors.allow.origin=.*
http.cors.allow.header=Content-Type,Authorization
http.cors.allow.methods=POST,GET,PUT,DELETE,HEAD
http.cors.allow.credentials=false
http.cors.allow.max-age=900

persistence.provider=

persistence.initialization.max-wait-seconds=0

namespace.default=ns

saga.log.type=none

#
# Maximum number of allowed concurrent running and queued saga executions will be computed as:
#   (saga.threadpool.max + saga.threadpool.queue.capacity) / 2
#
# core must be greater than queue capacity in order to avoid potential deadlocks in saga-executions. Ideally
# core should be at least twice the value of queue capacity, preferably even more, that way new threads beyond
# core are started.
saga.threadpool.core=100
# max must be greater than the maximum intended capacity of concurrent saga-executions that can ever happen.
# max should generally be at least twice that of core to ensure good capacity when core and queue is saturated.
saga.threadpool.max=200
# keepalive should be some number of seconds more than 0 or 1. 60 is a reasonable default.
saga.threadpool.keepalive.seconds=60
# queue capacity must be less than core. Half the value of core is a reasonable start or something less than that.
saga.threadpool.queue.capacity=20

specification.schema=

graphql.enabled=true
graphql.search.enabled=false

# Use a graphql schema is defined.
graphql.schema=
search.index.provider=

